/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2021-08-09 21:48:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.Front;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import accounts.AccountDao;
import accounts.Account;
import accounts.MessageDao;
import accounts.Message;
import java.util.List;

public final class chat_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>FlexibleJobs | World's best freelancing Webpage</title>\r\n");
      out.write("    <script>\r\n");
      out.write("        ");
AccountDao accountDao = (AccountDao) request.getServletContext().getAttribute("accountDao");
      out.write("\r\n");
      out.write("        ");
Account to = accountDao.selectByUsername((String) request.getSession().getAttribute("conversationWith"));
      out.write("\r\n");
      out.write("        ");
Account from = (Account) request.getSession().getAttribute("loggedUser");
      out.write("\r\n");
      out.write("        ");
List<Message> messages = ((MessageDao) request.getServletContext().getAttribute("messageDao")).getConversation(from.getUserName(), to.getUserName());
      out.write("\r\n");
      out.write("        const chatSocket = new WebSocket(\"ws://localhost:8080/FlexibleJobs/chat-endpoint\");\r\n");
      out.write("\r\n");
      out.write("        ");
if(session.getAttribute("sender")!=null){
      out.write("\r\n");
      out.write("        chatSocket.onopen = function (){\r\n");
      out.write("            chatSocket.send(\"reload\")\r\n");
      out.write("        }\r\n");
      out.write("        ");
session.removeAttribute("sender");
      out.write("\r\n");
      out.write("        ");
}
      out.write("\r\n");
      out.write("\r\n");
      out.write("        chatSocket.onmessage = function (ev) {\r\n");
      out.write("            if (ev.data === \"reload\") {\r\n");
      out.write("                window.location.href = \"http://localhost:8080/FlexibleJobs/chat.jsp\"\r\n");
      out.write("            }\r\n");
      out.write("        };\r\n");
      out.write("    </script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div style=\"border: 1px solid black; width: 40vw; margin: 0 auto; text-align: center\">\r\n");
      out.write("    <h1>welcome to chat</h1>\r\n");
      out.write("    <h3>chatting to ");
      out.print(to.getUserName());
      out.write("</h3>\r\n");
      out.write("\r\n");
      out.write("    ");
if (messages.isEmpty()) {
      out.write("\r\n");
      out.write("    <h3>No Messages yet</h3>\r\n");
      out.write("    ");
}
      out.write("\r\n");
      out.write("    <ul>\r\n");
      out.write("        ");
for (int i = 0; i < messages.size(); i++) {
      out.write("\r\n");
      out.write("        <li style=\"display: flex\">\r\n");
      out.write("            <h1>");
      out.print(messages.get(i).getSender());
      out.write(" : </h1>\r\n");
      out.write("            <h1 style=\"margin-left: 10px\">");
      out.print(messages.get(i).getText());
      out.write("</h1>\r\n");
      out.write("            <h1 style=\"margin-left: 10px\">");
      out.print(messages.get(i).getTime().toString());
      out.write("</h1>\r\n");
      out.write("        </li>\r\n");
      out.write("        ");
}
      out.write("\r\n");
      out.write("    </ul>\r\n");
      out.write("    <form action=\"message\" method=\"post\">\r\n");
      out.write("        <input id=\"message-content\" type=\"text\" name=\"content\"/>\r\n");
      out.write("        <input type=\"submit\" value=\"send\"/>\r\n");
      out.write("    </form>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
